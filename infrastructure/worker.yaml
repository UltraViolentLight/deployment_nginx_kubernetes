Description: >
    RG / Udacity
    This template deploys EKS worker nodes. Using template from awslabs. 
    https://github.com/awslabs/amazon-eks-ami/blob/master/amazon-eks-nodegroup.yaml
Parameters:
  EnvironmentName:
    Type: String
    Description: An environment name that will be prefixed to resource names.

  BootstrapArguments:
    Type: String
    Default: ""
    Description: "Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami"

  NodeAutoScalingGroupDesiredCapacity:
    Type: Number
    Default: 3
    Description: Desired capacity of Node Group ASG.

  NodeAutoScalingGroupMaxSize:
    Type: Number
    Default: 4
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredCapacity.

  NodeAutoScalingGroupMinSize:
    Type: Number
    Default: 1
    Description: Minimum size of Node Group ASG.

  NodeGroupName:
    Type: String
    Description: Unique identifier for the Node Group.

  NodeImageId:
    Type: String
    Default: ""
    Description: (Optional) Specify your own custom image ID. This value overrides any AWS Systems Manager Parameter Store value specified above.

  NodeImageIdSSMParam:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: /aws/service/eks/optimized-ami/1.14/amazon-linux-2/recommended/image_id
    Description: AWS Systems Manager Parameter Store parameter of the AMI ID for the worker node instances.

  NodeInstanceType:
    Type: String
    Default: t3.medium
    ConstraintDescription: Must be a valid EC2 instance type
    Description: EC2 instance type for the node instances

  NodeVolumeSize:
    Type: Number
    Default: 20
    Description: Node volume size

Conditions:
  HasNodeImageId: !Not
    - "Fn::Equals":
        - Ref: NodeImageId
        - ""

Resources:
  WorkerNodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref WorkerNodeInstanceRole

  WorkerNodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  WorkerNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for all nodes in the cluster
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      Tags:
        - Key:
              !Sub
                  - "kubernetes.io/cluster/${EksCluster}"
                  - EksCluster:
                      Fn::ImportValue:
                        !Sub "${EnvironmentName}-EKS"
          Value: owned

  AllowAllIPv4TrafficInboundToWorkerNodesFromWorkerNodes:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref WorkerNodeSecurityGroup
      SourceSecurityGroupId: !Ref WorkerNodeSecurityGroup
      IpProtocol: '-1'
      FromPort: 0
      ToPort: 65535

  AllowIPv4TCPEphemeralInboundToWorkerNodesFromEKSCluster:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref WorkerNodeSecurityGroup
      SourceSecurityGroupId:
        Fn::ImportValue:
          !Sub ${EnvironmentName}-SG
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  AllowIPv4TCPEphermeralOutboundFromEKSClusterToWorkerNodes:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-SG"
      DestinationSecurityGroupId: !Ref WorkerNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  AllowIPv4HTTPsInboundToWorkerNodesFromEKSCluster:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref WorkerNodeSecurityGroup
      SourceSecurityGroupId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-SG"
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  AllowIPv4HTTPsOutboundFromEKSClusterToWorkerNodes:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-SG"
      DestinationSecurityGroupId: !Ref WorkerNodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  AllowIPv4HTTPsInboundToEKSClusterFromWorkerNodes:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-SG"
      SourceSecurityGroupId: !Ref WorkerNodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443

  AllowIPv4AllInboundFromEKSClustertoEKSCluster:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId:         
        Fn::ImportValue:
          !Sub "${EnvironmentName}-SG"
      SourceSecurityGroupId:       
          Fn::ImportValue:
            !Sub "${EnvironmentName}-SG"
      IpProtocol: -1
      ToPort: 0
      FromPort: 65535

  AllowIPv4AllOutboundFromEKSClustertoEKSCluster:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId:         
        Fn::ImportValue:
          !Sub "${EnvironmentName}-SG"
      SourceSecurityGroupId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-SG"
      IpProtocol: -1
      ToPort: 0
      FromPort: 65535

  WorkerNodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 'False'
      IamInstanceProfile: !Ref WorkerNodeInstanceProfile
      ImageId: !Ref NodeImageId
      InstanceType: !Ref NodeInstanceType
      SecurityGroups:
      - !Ref WorkerNodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 20
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub 
              - |
                #!/bin/bash
                set -o xtrace
                /etc/eks/bootstrap.sh ${EnvironmentName}-EKS ${BootstrapArguments}
                /opt/aws/bin/cfn-signal --exit-code $? \
                        --stack  ${AWS::StackName} \
                        --resource WorkerNodeGroup  \
                        --region ${AWS::Region}
              - EksCluster:
                  Fn::ImportValue:
                      !Sub "${EnvironmentName}-EKS"

  WorkerNodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: 2
      LaunchConfigurationName: !Ref WorkerNodeLaunchConfig
      MinSize: 2
      MaxSize: 3
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRI1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRI2-SN"
      Tags:
        - Key: Name
          PropagateAtLaunch: "true"
          Value:
                !Sub
                  - "${EksCluster}-${NodeGroupName}-Node"
                  - EksCluster:
                      Fn::ImportValue:
                        !Sub "${EnvironmentName}-EKS"
        - Key:
              !Sub
                - "kubernetes.io/cluster/${EksCluster}"
                - EksCluster:
                    Fn::ImportValue:
                      !Sub "${EnvironmentName}-EKS"
          PropagateAtLaunch: "true"
          Value: owned
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: '1'
        MinInstancesInService: 1

Outputs:
  EKSClusterName:
    Description: The node instance role
    Value: !GetAtt WorkerNodeInstanceRole.Arn
    Export: 
      Name: !Sub ${EnvironmentName}-NIR
  WorkNodesIAMRoleArn:
    Description: The node instance role
    Value: !Ref WorkerNodeSecurityGroup
    Export: 
      Name: !Sub ${EnvironmentName}-NSG